@page "/company/{Id:int}"

@using HackathonSite.Data

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="top-special">
    <div class="px-4" style="margin: 0.5em 4em 0em 4em;">
        @if (Company != null)
        {
            <h3>@Company.Name</h3>
            <h4>@Company.Location</h4>
        }
    </div>
</div>

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <br />

    <div class="h-carousel slider">
        <div>Diversity Score</div>
        <div>ERGs</div>
        <div>D&amp;I Events</div>
        <div>Salaries</div>
    </div>

    <br />
    <br />

    <div style="background-color: #f5cb5c; padding: 1.5em;">
        <h1>
            @Page
        </h1>
    </div>

    <br />

    <div hidden="@ShowDiversity">
        <p>
            @Company.DiversityText
        </p>
    </div>

    <div hidden="@ShowERG">
        <p>
            @Company.ERGText
        </p>
    </div>

    <div hidden="@(!ShowEvents)">
        <p>
            <iframe src="https://calendar.google.com/calendar/embed?src=@(Company.CalendarLink)%40group.calendar.google.com&ctz=America%2FNew_York" style="border: 0; width: 100%" height="300" frameborder="0" scrolling="no"></iframe>
        </p>
    </div>

    <div hidden="@ShowSalaries">
        <p>

        </p>
    </div>
</div>

@code
{
    [ParameterAttribute]
    public int Id { get; set; }

    public string Page { get; set; }
    public string Text { get; set; }

    public bool ShowDiversity { get; set; }
    public bool ShowERG { get; set; }
    public bool ShowEvents { get; set; }
    public bool ShowSalaries { get; set; }

    public Company Company { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // default option
        await UpdateContent(0);
        // before I worry about database
        if (Id == 0)
        {
            Company = new Company
            {
                Id = 0,
                Name = "COMCAST CORPORATION",
                Location = "PHILADELPHIA, PA",
                CalendarLink = "51knhc057dqa5e9urjbto6b8t4"
            };
        }
        else if (Id == 1)
        {
            Company = new Company
            {
                Id = 1,
                Name = "MICROSOFT CORPORATION",
                Location = "REDMOND, WA",
                CalendarLink = "fe2gdontdjfi5018rm40kf8h3o"
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("cacheReference", dotNetReference);

        await JSRuntime.InvokeVoidAsync("initCarousel");
    }

    [JSInvokable("UpdateContent")]
    public async Task UpdateContent(int currentSlide)
    {
        ShowDiversity = false;
        ShowERG = false;
        ShowEvents = false;
        ShowSalaries = false;

        if (currentSlide == 0)
        {
            ShowDiversity = true;
            Page = "Diversity Score";
            Text = "blah blah diversity blah";
        }
        else if (currentSlide == 1)
        {
            ShowERG = true;
            Page = "ERGs";
            Text = "blah blah erg something something blah";
        }
        else if (currentSlide == 2)
        {
            ShowEvents = true;
            Page = "D&I Events";
            //Text = "o crap don't forget about that calendar thing I was supposed to do";
        }
        else if (currentSlide == 3)
        {
            ShowSalaries = true;
            Page = "Salaries";
            Text = "gsflsdjf lsdfjpsd fjosdjf osd fsdof jsdfsdj";
        }

        StateHasChanged();
    }
}
